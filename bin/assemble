#!/usr/bin/env ruby

# RUBY_GC_HEAP_INIT_SLOTS=45000
# ./bin/assemble vice-city _out/vice-city main Sexp _out/vice-city/recompiled.scm
# ./bin/assemble san-andreas _out/san-andreas-experiments main Sexp GAME

if ENV["PWD"].split(/\//)[-1] == "gta-scm"
  $: << "./lib"
  require 'gta_scm'
end

logger.info ARGV.inspect

mem_use_bytes = (`ps -o rss= -p #{$$}`.to_i * 1024)
logger.info "Memory usage: #{mem_use_bytes/1024/1024} MB"

LOG_LEVEL = :none

scm = GtaScm::Scm.load(ARGV[0],ARGV[1])
scm.logger.level = LOG_LEVEL
scm.load_opcode_definitions!

=begin
NEXT:
support variable names + auto mem allocation
support gxt replacement/insertion
=end


external = ARGV[5] == "external=1"
externals = ARGV[5].present? ? [ARGV[5].split("=")] : []

# puts "external: #{external}"
# exit

asm = GtaScm::Assembler::Sexp.new(ARGV[1])
asm.logger.level = scm.logger.level
path = ARGV[4]
if path == "GAME"
  # GAME_PATH = "/Users/barry/Library/Application Support/Steam/SteamApps/common/grand theft auto - vice city/Grand Theft Auto - Vice City.app/Contents/Resources/transgaming/c_drive/Program Files/Rockstar Games/Grand Theft Auto Vice City"
  GAME_PATH = "/Users/barry/Library/Application Support/Steam/SteamApps/common/grand theft auto - san andreas/Grand Theft Auto - San Andreas.app/Contents/Resources/transgaming/c_drive/Program Files/Rockstar Games/GTA San Andreas"
  # path = "#{GAME_PATH}/data/main.scm"
  path = "#{GAME_PATH}/data/script/"
  logger.notice "Compiling into game dir..."
end

exit_code = 1
begin
  asm.external = external
  asm.assemble(scm,ARGV[2],path)

# gxt = GtaScm::GxtFile.new(File.open("games/#{scm.game_id}/text/american.gxt"))
# gxt.read_tabl!
# gxt.read_tkey!
# gxt.read_tdat!
# gxt.rebuild!

  rescue GtaScm::RubyToScmCompiler::InputError => exception

    logger.error exception.message
    exception.backtrace.each{|bt| logger.error bt }

    logger.error ""
    logger.error ""
    logger.error "There's a problem with your code!"
    logger.error ""
    exception.blame_lines.each{|bl| logger.error bl}
    logger.error ""


  # TODO: handle Assembler errors too

  ensure
    mem_use_bytes = (`ps -o rss= -p #{$$}`.to_i * 1024)
    logger.info "Memory usage: #{mem_use_bytes/1024/1024} MB"
    # logger.info "GC stats: #{GC.stat.inspect}"
  end

exit(exit_code)




offset = 194255
offset = 60030
offset = 280790
size = 291472-offset

nscm = GtaScm::Scm.load(scm.game_id,"#{path}/main.scm")
nscm.load_opcode_definitions!
parser = GtaScm::Parser.new(nscm,offset)
parser.load_opcode_definitions(nscm.opcodes)
parser.seek(offset)
parser.end_offset = offset + size
puts "parser.parse_instructions!"
parser.parse_instructions!
parser.add_jumps_to_nodes!(parser.nodes)

nscm.load_from_parser(parser)
require 'gta_scm/control_flow_graph'
cfg = nscm.control_flow_graph(offset,size)
cfg.mission_offset = offset
puts "Control Flow Graph:"

cfg.gourge!
# cfg.nodes.each do |node|
#   puts node.inspect
# end

File.open("call-graph.json","w"){|f| f << cfg.to_json }

cfg.generate_png!

