#!/usr/bin/env ruby

# sudo bundle exec ./bin/code_reloader
if ENV["PWD"].split(/\//)[-1] == "gta-scm"
  $: << "./lib"
  require 'gta_scm'
end

print "\033]0;GtaScm Debugger\a"
print "\n"

require 'gta_scm/process'
require 'gta_scm/thread'
process = GtaScm::Process.new
process.load_symbols!("symbols.gta-scm-symbols")

process.detect_pid_and_attach!

require 'rutui'
require 'gta_scm/rutui_ext'
Thread.abort_on_exception = true
SIZE = RuTui::Screen.size
RuTui::Theme.create :scm, {
  :background => RuTui::Pixel.new(236,234,":"),
  :border     => RuTui::Pixel.new(103,234,"-"),
  :textcolor  => 250,
  :highlight  => 244,
  :highlight_fg  => 234,
  :rainbow    => [1,3,11,2,4,5]
}
RuTui::Theme.use :scm


# BASE_ALLOC_OFFSET = (2**30)# + (2**29)
# BASE_ALLOC_OFFSET = (2**28)
# BASE_ALLOC_OFFSET = 200_000 + 70_000
BASE_ALLOC_OFFSET = 196_100
$panels = {}

$exit = false

class GtaScm::Panel
  attr_accessor :x
  attr_accessor :y
  attr_accessor :width
  attr_accessor :height
  attr_accessor :elements
  attr_accessor :settings
  attr_accessor :controller

  def initialize(x,y,width,height)
    self.x = x
    self.y = y
    self.width = width
    self.height = height
    self.elements = {}
    self.settings = {}
  end

  def add_elements_to_screen(screen)
    self.elements.each_pair do |key,element|
      screen.add(element)
    end
  end

  def update(process,is_attached)
    
  end

  def input(key,is_attached,process)
    
  end

  def dx(xo)
    self.x + xo
  end
  def dy(yo)
    self.y + yo
  end

  def panel_list(data,rows,empty_row)
    list_height = rows - 2
    data = data[0...list_height]
    while data.size < list_height
      data << empty_row
    end
    data
  end
end


class GtaScm::CodeReloaderPanel < GtaScm::Panel
  def initialize(*)
    super
    self.elements[:text] = RuTui::Text.new(x: dx(0), y: dy(0), text: "")
    self.elements[:help_text] = RuTui::Text.new(x: dx(0), y: dy(1), text: "")
    self.elements[:alloc_text] = RuTui::Text.new(x: dx(0), y: dy(2), text: "")
    set_text

    self.elements[:alloc_table] = RuTui::Table.new({
      x: self.dx(0),
      y: self.dy(3),
      table: [["default","","","","","","","","","","","","",""]],
      cols: [
        { title: "ID"           , length:  3 },
        { title: "Offset"      , length: 12 },
        { title: "Magic"       , length:  8 },
        { title: "Size"        , length:  5 },
        { title: "Prev Block"  , length:  12 },
        { title: "SCM Offset"  , length:  12 },
        { title: "xInit" , length: 5 },
        { title: "xLoop" , length: 5 },
        { title: "xKill" , length: 5 },
        { title: "pLoopH" , length: 6 },
        { title: "pLoopG" , length: 6 },
        { title: "pExitG" , length: 6 },
        { title: "Compiled At" , length: 25 },
        { title: "Filename" , length: 25 },
      ],
      header: true,
      hover: RuTui::Theme.get(:highlight),
      hover_fg: RuTui::Theme.get(:highlight_fg),
    })
  end

  def set_text(process = nil)
    str = "Code Reloader"
    str = str.center(self.width)
    self.elements[:text].bg = 7
    self.elements[:text].fg = 0
    self.elements[:text].set_text(str)

    return if !process || !process.attached?
    self.elements[:alloc_text].set_text("Allocations"+(" "*10)+"Base offset: #{BASE_ALLOC_OFFSET}"+(" "*10)+"SCM Offset: #{process.scm_offset}")
    self.elements[:help_text].set_text("p: debug inject")
  end

  MAGIC_STRING = "GtaScmReloader1".force_encoding("ASCII-8BIT").freeze
  attr_accessor :written
  def update(process,is_attached)
    # data = [["","","","",""]]
    return if !is_attached

    # if !self.written
    #   offsets = []

    #   offsets << BASE_ALLOC_OFFSET
    #   payload,symbols = self.bytecode(offsets[-1],"inject/test",offsets[-2] || -1,process.scm_offset)
    #   add_packed_header!(payload,symbols)
    #   puts "==="
    #   puts hex(payload)
    #   puts "==="
    #   process.write(offsets[-1],payload)
    #   process.rpc(1,offsets[-1]-process.scm_offset)

    #   50.times { puts }

    #   self.written = true
    # end

    blocks = []
    block = nil
    offset = BASE_ALLOC_OFFSET+process.scm_offset
    loop do
      block = read_block_at(process,offset)
      break if !block
      offset += block[3] # block size
      blocks << block
    end

    data = blocks.map do |block|
      block.map(&:to_s)
    end

    if data.size == 0
      data = [["#{blocks.size}","#{BASE_ALLOC_OFFSET}","","","","","","","","","","","","#{hex(process.read(BASE_ALLOC_OFFSET-2,16))}"]]
    end

    if data[0] && data[0].size == 14
      self.elements[:alloc_table].set_table(data)
    end

    set_text(process)


  end

  def input(key,is_attached,process)
    return if !is_attached

    $last_inject_offset ||= -1
    $current_inject_offset ||= BASE_ALLOC_OFFSET
    if key == "p"
      aaa = $panels[:code_reloader].bytecode($current_inject_offset,"inject/test",$last_inject_offset,process.scm_offset)
      aaa[0] = $panels[:code_reloader].add_packed_header!(aaa[0],aaa[1])
      process.write($current_inject_offset+process.scm_offset,aaa[0])
      process.rpc(1,$current_inject_offset)
      $last_inject_offset = $current_inject_offset+process.scm_offset
      $current_inject_offset += aaa[0].size
    end
  end


  def read_block_at(process,offset)
    return nil if !process || !process.attached?
    begin
      opcode = process.read(offset,2)
      magic = process.read(offset+2,MAGIC_STRING.size)
    rescue
      return nil
    end
    return nil if magic != MAGIC_STRING
    i = 2+16
    _offset = GtaScm::Types.bin2value( process.read(offset+i,4) , :int32 )
    i += 4
    # return nil if _offset != offset
    size            = GtaScm::Types.bin2value( process.read(offset+i,4) , :int32 )
    i += 4
    previous_block = GtaScm::Types.bin2value( process.read(offset+i,4) , :int32 )
    i += 4
    scm_offset = GtaScm::Types.bin2value( process.read(offset+i,4) , :int32 )
    i += 4
    init_offset = GtaScm::Types.bin2value( process.read(offset+i,4) , :int32 )
    i += 4
    loop_offset = GtaScm::Types.bin2value( process.read(offset+i,4) , :int32 )
    i += 4
    kill_offset = GtaScm::Types.bin2value( process.read(offset+i,4) , :int32 )
    i += 4
    plooph = GtaScm::Types.bin2value( process.read(offset+i,4) , :int32 )
    i += 4
    ploopg = GtaScm::Types.bin2value( process.read(offset+i,4) , :int32 )
    i += 4
    pexitg = GtaScm::Types.bin2value( process.read(offset+i,4) , :int32 )
    i += 4

    compiled_at_i = GtaScm::Types.bin2value( process.read(offset+i,4) , :int32 )
    i += 4
    compiled_at_u = GtaScm::Types.bin2value( process.read(offset+i,4) , :int32 )
    i += 4
    compiled_at = Time.at(compiled_at_i)
    # compiled_at.usec = compiled_at_u


    # base offset (mem)
    # size
    # prev offset (mem)
    # base offset (scm)
    # body offset (relative)
    # init offset (relative)
    # loop offset (relative)
    # exit offset (loop)
    # return [offset,magic,size,previous_block,init_offset,loop_offset,kill_offset,body_offset,nil]
    return [nil,offset,magic,size,previous_block,scm_offset,init_offset,loop_offset,kill_offset,plooph,ploopg,pexitg,compiled_at.strftime("%Y-%m-%d %H:%M:%S %z"),nil]
  end

  def bytecode(offset,name,previous_block_offset,scm_offset)
    compiled_at = Time.now
    # offset = 2**30
    input_dir = "./scm-src/sa-experiments"
    # name = "inject/test"
    file = ""

    tokens  = self.header_instructions
    tokens += [
      [:IncludeRuby,name]
    ]

    iscm = GtaScm::Scm.load_string("san-andreas","")
    # iscm.logger.level = :none
    iscm.load_opcode_definitions!

    iasm = GtaScm::Assembler::Sexp.new(input_dir)
    iasm.code_offset = offset# - scm_offset

    def iasm.install_features!
      class << self
        include GtaScm::Assembler::Feature::VariableAllocator
        # include GtaScm::Assembler::Feature::ListVariableAllocator
        include GtaScm::Assembler::Feature::VariableHeaderAllocator
        include GtaScm::Assembler::Feature::ExportSymbols
        # include GtaScm::Assembler::Feature::CoolOutput
      end
      self.on_feature_init()
    end

    iasm.install_features!
    iasm.symbols_name = "inject"

    lines = tokens.map { |node| Elparser::encode(node) }

    lines.each_with_index do |line,line_idx|
      iasm.read_line(iscm,line,file,line_idx)
    end
    iasm.on_before_touchups()
    iasm.install_touchup_values!
    iasm.on_after_touchups()
    iasm.on_complete()

    output = StringIO.new
    iasm.emit_assembly!(iscm,"",output)

    output.rewind
    code = output.read.force_encoding("ASCII-8BIT")
    symbols = iasm.symbols_data

    # base offset (mem)
    # size
    # prev offset (mem)
    # base offset (scm)
    # body offset (relative)
    # init offset (relative)
    # loop offset (relative)
    # exit offset (loop)

    data = {}
    data[:base_offset_mem] = offset
    data[:size] = code.bytesize
    data[:previous_block_mem] = previous_block_offset
    data[:base_offset_scm] = offset
    data[:code_init] = symbols[:labels][:inject_init]
    data[:code_loop] = symbols[:labels][:inject_loop]
    data[:code_exit] = symbols[:labels][:inject_exit]
    data[:patch_loop_head] = symbols[:labels][:inject_loop_head]
    data[:patch_loop_goto] = symbols[:labels][:inject_loop_goto]
    data[:patch_exit_goto] = symbols[:labels][:inject_exit_goto]
    data[:filename] = name
    data[:compiled_at] = compiled_at

    [code,data,symbols]
  end



  def header_instructions
    [                                         # total: 183

      [:Rawhex,["B6","05"]],                  # 2
      [:Padding,[128]],                       # 128
      [:labeldef,:header_tail],

      [:script_name,[[:string8,"xinj003"]]],  # 11

      [:gosub,[[:label,:inject_init]]],       # 7
      # [:terminate_this_script],               # 2

      [:labeldef,:inject_loop_head],          # 
      [:wait,[[:int16,0]]],                   # 5
      [:gosub,[[:label,:inject_loop]]],       # 7

      # on reload, jump to new inject_loop_head here
      # on re-init, jump to inject_loop_tail
      [:labeldef,:inject_loop_goto],
      [:goto, [[:label,:inject_loop_head]]],  # 7

      [:labeldef,:inject_loop_tail],          # 

      [:gosub,[[:label,:inject_exit]]],       # 7

      # on re-init, jump to new block here
      [:labeldef,:inject_exit_goto],
      [:goto, [[:label,:inject_exit_tail]]],  # 7

      [:labeldef,:inject_exit_tail],          # 

      [:terminate_this_script]                # 2
    ]
  end

  def add_packed_header!(payload,symbols)
    offset = 2
    payload = payload.dup
    
    payload[offset...offset+16] = MAGIC_STRING.ljust(16,"\0").force_encoding("ASCII-8BIT")
    offset += 16
    
    payload[offset...offset+4] = GtaScm::Types.value2bin(symbols[:base_offset_mem],:int32)
    offset += 4

    payload[offset...offset+4] = GtaScm::Types.value2bin(symbols[:size],:int32)
    offset += 4

    payload[offset...offset+4] = GtaScm::Types.value2bin(symbols[:previous_block_mem],:int32)
    offset += 4

    payload[offset...offset+4] = GtaScm::Types.value2bin(symbols[:base_offset_scm],:int32)
    offset += 4

    payload[offset...offset+4] = GtaScm::Types.value2bin(symbols[:code_init],:int32)
    # payload[offset...offset+4] = "\xFF\xFF\xFF\xFF".force_encoding("ASCII-8BIT")
    offset += 4

    payload[offset...offset+4] = GtaScm::Types.value2bin(symbols[:code_loop],:int32)
    # payload[offset...offset+4] = "\xFF\xFF\xFF\xFF".force_encoding("ASCII-8BIT")
    offset += 4

    payload[offset...offset+4] = GtaScm::Types.value2bin(symbols[:code_exit],:int32)
    # payload[offset...offset+4] = "\xFF\xFF\xFF\xFF".force_encoding("ASCII-8BIT")
    offset += 4

    payload[offset...offset+4] = GtaScm::Types.value2bin(symbols[:patch_loop_head],:int32)
    # payload[offset...offset+4] = "\xFF\xFF\xFF\xFF".force_encoding("ASCII-8BIT")
    offset += 4

    payload[offset...offset+4] = GtaScm::Types.value2bin(symbols[:patch_loop_goto],:int32)
    # payload[offset...offset+4] = "\xFF\xFF\xFF\xFF".force_encoding("ASCII-8BIT")
    offset += 4

    payload[offset...offset+4] = GtaScm::Types.value2bin(symbols[:patch_exit_goto],:int32)
    # payload[offset...offset+4] = "\xFF\xFF\xFF\xFF".force_encoding("ASCII-8BIT")
    offset += 4

    payload[offset...offset+4] = GtaScm::Types.value2bin(symbols[:compiled_at].to_i,:int32)
    offset += 4

    payload[offset...offset+4] = GtaScm::Types.value2bin(symbols[:compiled_at].usec,:int32)
    offset += 4

    payload
  end
end



# $panels[:process] = GtaScm::ProcessPanel.new(0,0,80,0)
$panels[:code_reloader] = GtaScm::CodeReloaderPanel.new(0,0,80,0)

# aaa = $panels[:code_reloader].bytecode(BASE_ALLOC_OFFSET,"inject/test",-1,process.scm_offset)
# aaa[0] = $panels[:code_reloader].add_packed_header!(aaa[0],aaa[1])
# puts hex( aaa[0] )
# puts aaa[1].inspect
# puts aaa[2].inspect

# process.write(BASE_ALLOC_OFFSET+process.scm_offset,aaa[0])
# process.rpc(1,BASE_ALLOC_OFFSET)

# exit


screen = RuTui::Screen.new

$panels.each_pair do |_,panel|
  panel.add_elements_to_screen(screen)
end

RuTui::ScreenManager.add :default, screen
RuTui::ScreenManager.set_current :default

thr = ::Thread.new do
  loop do
    break if $exit

    start = Time.now

    begin
      begin
        process.detect_pid_and_attach!
      rescue
        #whatevs
      end

      is_attached = false
      if process.attached?
        is_attached = true
      else
        # not attached
      end

      $panels.each_pair do |_,panel|
        panel.update(process,is_attached)
      end

      RuTui::ScreenManager.draw
    ensure
      sleep_time = (start + 0.5) - Time.now
      sleep(sleep_time) if sleep_time > 0.0
    end

  end
end

thr2 = ::Thread.new do
  loop do
    break if $exit

    key = RuTui::Input.getc

    sleep 0.1

    $key = key

    if key == :ctrl_c
      $exit = true
    end

    $panels.each_pair do |_,panel|
      panel.input(key,true,process)
    end


  end
end

thr.join
thr2.join

print RuTui::Ansi.clear_color + RuTui::Ansi.clear