#!/usr/bin/env ruby

# sudo bundle exec ./bin/debugger
if ENV["PWD"].split(/\//)[-1] == "gta-scm"
  $: << "./lib"
  require 'gta_scm'
end

print "\033]0;GtaScm Debugger\a"
print "\n"

require 'gta_scm/process'
require 'gta_scm/thread'
process = GtaScm::Process.new
process.load_symbols!("symbols.gta-scm-symbols")

process.detect_pid_and_attach!

require 'rutui'
require 'gta_scm/rutui_ext'
Thread.abort_on_exception = true
SIZE = RuTui::Screen.size
# current font size = 102 x 60
# smaller font size = 120 x 76
#   wider thread list - thread ids, favourite threads, group named threads together with count

# puts SIZE
# exit

RuTui::Theme.create :scm, {
  :background => RuTui::Pixel.new(236,234,":"),
  :border     => RuTui::Pixel.new(103,234,"-"),
  :textcolor  => 250,
  :unfocused  => 245,
  # :highlight  => 234,
  # :highlight_fg  => 134,
  :highlight  => 244,
  :highlight_fg  => 234,
  :rainbow    => [1,3,11,2,4,5]
}
RuTui::Theme.use :scm


require 'gta_scm/panel'

$panels = {}

$exit = false

begin
ty = 0
console_lines = 16
console_at_top = false
if console_at_top
  ty = 23
  $panels[:repl] = GtaScm::Panel::Repl.new(0,0,125,ty-1)
else
  $panels[:repl] = GtaScm::Panel::Repl.new(0,61,125,console_lines+6)
end

$panels[:process] = GtaScm::Panel::Process.new(63,ty+0,62,1)
$panels[:thread_selector] = GtaScm::Panel::ThreadSelector.new(0,ty+0,62,1)
$panels[:thread_info] = GtaScm::Panel::ThreadInfo.new(10+4,ty+1,48,10 + 8 + 2 + 2)
$panels[:thread_info].controller = $panels[:thread_selector]
$panels[:thread_list] = GtaScm::Panel::ThreadList.new(0,ty+1,10,60-1)
$panels[:thread_list].controller = $panels[:thread_selector]
$panels[:lvars] = GtaScm::Panel::Lvars.new(10+4,ty+23,48,37)
$panels[:lvars].controller = $panels[:thread_selector]
$panels[:gvars] = GtaScm::Panel::Gvars.new(63,ty+23,62,37)
# $panels[:breakpoint] = GtaScm::Panel::Breakpoint.new(63,ty+2,62,4)
$panels[:code_injector] = GtaScm::Panel::CodeInjector.new(63,ty+12,62,11)
# $panels[:mission_skipper] = GtaScm::Panel::MissionSkipper.new(63,ty+15,28,32)


screen = RuTui::Screen.new

$panels.each_pair do |_,panel|
  panel.add_elements_to_screen(screen)
end

RuTui::ScreenManager.add :default, screen
RuTui::ScreenManager.set_current :default

$panels.values.each(&:on_blur)
$focused_panel = :repl


thr = ::Thread.new do
  loop do
    break if $exit

    start = Time.now

    begin
      begin
        process.detect_pid_and_attach!
      rescue
        #whatevs
      end

      is_attached = false
      if process.attached?
        is_attached = true
      else
        # not attached
      end

      $panels.each_pair do |name,panel|
        panel.update(process,is_attached,$focused_panel == name)
      end

      RuTui::ScreenManager.draw
      GC.start
    ensure
      sleep_time = (start + 0.25) - Time.now
      sleep(sleep_time) if sleep_time > 0.0
    end

  end
end

thr2 = ::Thread.new do
  print "\e[?1000h" # get mouse coords as keypress
  print "\e[?25l" # hide cursor
  loop do
    break if $exit

    print "\e[?25l" # hide cursor
    key = RuTui::Input.getc

    if key == :ctrl_c
      $exit = true
      break
    end

    key = key.force_encoding("ASCII-8BIT") if key.is_a?(String)

    $key = key

    if key.is_a?(String) && key.size > 1 && key.bytes[0] == 27
      x = key.bytes[4] - 32 - 1
      y = key.bytes[5] - 32 - 1
      # mouse event
      $panels.each_pair do |panel_name,panel|
        panel.abs_mouse_click(key.bytes[0],key.bytes[3],true,process)
        panel.abs_mouse_move(x,y,true,process)

        if x >= panel.x && x < panel.x + panel.width
          if y >= panel.y && y < panel.y + panel.height

            if key.bytes[3] == 32 # 32 = mouse down, 35 = mouse up

              if $focused_panel != panel_name
                $panels[$focused_panel].on_blur()
                $focused_panel = panel_name
                $panels[$focused_panel].on_focus()
              end

              panel.mouse_click(x-panel.x,y-panel.y,true,process)
            elsif key.bytes[3] == 67 # 67 = mouse move
              panel.mouse_move(x-panel.x,y-panel.y,true,process)
            elsif key.bytes[3] == 96 # scroll up
              panel.mouse_scroll(x-panel.x,y-panel.y,+1,true,process)
            elsif key.bytes[3] == 97 # scroll down
              panel.mouse_scroll(x-panel.x,y-panel.y,-1,true,process)
            end

          end
        end

      end
    elsif $panels[$focused_panel].has_textfield
      $panels[$focused_panel].textfield_input(key,true,process)
    else
      $panels.each_pair do |_,panel|
        panel.input(key,true,process)
      end
    end

  end
end

# thr3 = ::Thread.new do
#   loop do


#     sleep 0.1
#   end
# end


thr.join
thr2.join
# thr3.join

rescue => ex

  50.times { puts }
  puts ex.message
  puts ex.backtrace
  50.times { puts }

  raise ex
ensure
print "\e[?1000l" # get mouse coords as keypress
# print "\e[?1003l" # get mouse coords as keypress
print RuTui::Ansi.clear_color + RuTui::Ansi.clear
`reset`
end