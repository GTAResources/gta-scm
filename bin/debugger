#!/usr/bin/env ruby

# sudo bundle exec ./bin/debugger
if ENV["PWD"].split(/\//)[-1] == "gta-scm"
  $: << "./lib"
  require 'gta_scm'
end

print "\033]0;GtaScm Debugger\a"
print "\n"

require 'gta_scm/process'
require 'gta_scm/thread'
process = GtaScm::Process.new
process.load_symbols!("symbols.gta-scm-symbols")

process.detect_pid_and_attach!

require 'rutui'
require 'gta_scm/rutui_ext'

SIZE = RuTui::Screen.size
# puts SIZE
# exit

RuTui::Theme.create :scm, {
  :background => RuTui::Pixel.new(236,234,":"),
  :border     => RuTui::Pixel.new(103,234,"-"),
  :textcolor  => 250,
  :highlight  => 89,
  :rainbow    => [1,3,11,2,4,5]
}
RuTui::Theme.use :scm

$panels = {}

$exit = false

class GtaScm::Panel
  attr_accessor :x
  attr_accessor :y
  attr_accessor :width
  attr_accessor :height
  attr_accessor :elements
  attr_accessor :settings
  attr_accessor :controller

  def initialize(x,y,width,height)
    self.x = x
    self.y = y
    self.width = width
    self.height = height
    self.elements = {}
    self.settings = {}
  end

  def add_elements_to_screen(screen)
    self.elements.each_pair do |key,element|
      screen.add(element)
    end
  end

  def update(process,is_attached)
    
  end

  def input(key,is_attached)
    
  end

  def dx(xo)
    self.x + xo
  end
  def dy(yo)
    self.y + yo
  end

  def panel_list(data,empty_row)
    list_height = self.height - 2
    data = data[0..list_height]
    while data.size < list_height
      data << empty_row
    end
    data
  end
end

class GtaScm::ThreadSelectorPanel < GtaScm::Panel
  def initialize(*)
    super
    self.settings[:thread_id] = 95
  end

  def input(key,is_attached)
    case key
    when "w"
      self.settings[:thread_id] += 1
      self.settings[:key] = "w"
    when "s"
      self.settings[:thread_id] -= 1
      self.settings[:key] = "s"
    end

    self.settings[:thread_id] = 95 if self.settings[:thread_id] >= 96
    self.settings[:thread_id] = 0  if self.settings[:thread_id] <= 0
  end
end

class GtaScm::LvarsPanel < GtaScm::Panel
  def initialize(*)
    super
    self.elements[:table] = RuTui::Table.new({
      x: self.dx(0),
      y: self.dy(0),
      table: [["","","",""]],
      cols: [
        { title: "", length: 5 },
        { title: "", length: 6 },
        { title: "", length: 12 },
        { title: "", length: 14 },
      ],
      header: false,
      hover: RuTui::Theme.get(:highlight),
    })
    # self.settings[:thread_id] ||= 95
    self.settings[:lvars_count] = 32
    self.settings[:types] = [:int] * self.settings[:lvars_count]
    self.settings[:names] = [""] * self.settings[:lvars_count]
  end

  def update(process,is_attached)
    if !is_attached
      return
    end

    self.settings[:thread_id] = self.controller.settings[:thread_id] if self.controller

    if thread = process.threads[self.settings[:thread_id]]
      lvars_int   = thread.local_variables_ints
      lvars_float = thread.local_variables_floats

      data = self.settings[:lvars_count].times.map do |ii|
        case self.settings[:types][ii]
        when :int
          [ii.to_s,"int",lvars_int[ii].to_s,self.settings[:names][ii].to_s]
        when :float
          [ii.to_s,"flt",lvars_float[ii].round(3).to_s,self.settings[:names][ii].to_s]
        when :bin
          [ii.to_s,"bin",lvars_int[ii].to_s(2).rjust(32,"0").chars.in_groups_of(8).map{|g| g.join}.join("-")]
        else
          nil
        end
      end.compact

      # data << ["#{self.settings[:thread_id]}","#{$key}","#{self.settings[:key]}",""]
      # self.settings[:thread_id] -= 1

      self.elements[:table].set_table(data)
    end
  end
end


class GtaScm::ThreadListPanel < GtaScm::Panel
  def initialize(*)
    super
    self.elements[:table] = RuTui::Table.new({
      x: self.dx(0),
      y: self.dy(0),
      table: [[""]],
      cols: [
        { title: "", length: 10 },
      ],
      header: false,
      hover: RuTui::Theme.get(:highlight),
    })
    # self.settings[:thread_id] ||= 95
    self.settings[:selected_row] = 0
  end

  def update(process,is_attached)
    if !is_attached
      return
    end

    self.settings[:thread_id] = self.controller.settings[:thread_id] if self.controller

    data = self.panel_list( process.threads.reverse.select(&:active?).map.each_with_index do |thread,idx|
      if thread.thread_id == self.settings[:thread_id]
        self.settings[:selected_row] = idx
      end
      [
        "#{thread.status_icon} #{thread.name}"
      ]
    end, [""])

    self.elements[:table].clear_highlight!
    self.elements[:table].highlight( self.settings[:selected_row] )
    self.elements[:table].set_table(data)
  end
end


class GtaScm::ThreadInfoPanel < GtaScm::Panel
  def initialize(*)
    super
    self.elements[:table] = RuTui::Table.new({
      x: self.dx(0),
      y: self.dy(0),
      table: [["",""]],
      cols: [
        { title: "", length: 10 },
        { title: "", length: 12 },
      ],
      header: false,
      hover: RuTui::Theme.get(:highlight),
    })
    # self.settings[:thread_id] ||= 95
  end

  def update(process,is_attached)
    if !is_attached
      return
    end

    self.settings[:thread_id] = self.controller.settings[:thread_id] if self.controller

    if thread = process.threads[self.settings[:thread_id]]
      data = [
        ["ID","#{thread.thread_id}"],
        ["Name","#{thread.name}"],
        ["PC","#{thread.scm_pc}"],
        ["Base PC","#{thread.base_pc_scm}"],
        ["Wake Time","#{thread.wake_time}"],
        ["Timer A","#{thread.timer_a}"],
        ["Timer B","#{thread.timer_b}"],
        ["BranchRes","#{thread.branch_result}"],
        ["Mission","#{thread.is_mission}"],
        ["External","#{thread.is_external}"],
        ["BranchRes2","#{thread.branch_result2}"],
        ["NotFlag","#{thread.not_flag}"],
        ["DaState","#{thread.death_arrest_state}"],
        ["DaExecd","#{thread.death_arrest_executed}"],
        ["SkipPC","#{thread.scene_skip_pc}"],
        ["MissionFlg","#{thread.mission_flag}"],
        ["Unknown1","#{thread.unknown1}"],
        ["Unknown2","#{thread.unknown2}"],
        ["Stack","#{thread.scm_return_stack[0]}"],
        ["","#{thread.scm_return_stack[1]}"],
        ["","#{thread.scm_return_stack[2]}"],
        ["","#{thread.scm_return_stack[3]}"],
        ["","#{thread.scm_return_stack[4]}"],
        ["","#{thread.scm_return_stack[5]}"],
        ["","#{thread.scm_return_stack[6]}"],
        ["","#{thread.scm_return_stack[7]}"]
      ]

      self.elements[:table].set_table(data)
    end
  end
end


$panels[:thread_selector] = GtaScm::ThreadSelectorPanel.new(0,0,0,0)
$panels[:thread_list] = GtaScm::ThreadListPanel.new(0,SIZE[0]-45,10,45)
$panels[:thread_list].controller = $panels[:thread_selector]
$panels[:lvars] = GtaScm::LvarsPanel.new(10+2+2,SIZE[0]-32-2,50,32)
$panels[:lvars].controller = $panels[:thread_selector]
$panels[:thread_info] = GtaScm::ThreadInfoPanel.new(75,0,22,40)
$panels[:thread_info].controller = $panels[:thread_selector]


screen = RuTui::Screen.new

$panels.each_pair do |_,panel|
  panel.add_elements_to_screen(screen)
end

RuTui::ScreenManager.add :default, screen
RuTui::ScreenManager.set_current :default

thr = ::Thread.new do
  loop do
    break if $exit

    begin
      process.detect_pid_and_attach!

      is_attached = false
      if process.attached?
        is_attached = true
      else
        # not attached
      end

      $panels.each_pair do |_,panel|
        panel.update(process,is_attached)
      end

      RuTui::ScreenManager.draw
    ensure
      sleep 0.2
    end

  end
end

thr2 = ::Thread.new do
  loop do
    break if $exit

    key = RuTui::Input.getc

    $key = key

    if key == :ctrl_c
      $exit = true
    end

    $panels.each_pair do |_,panel|
      panel.input(key,true)
    end


  end
end

# thr3 = ::Thread.new do
#   loop do


#     sleep 0.1
#   end
# end


thr.join
thr2.join
# thr3.join

print RuTui::Ansi.clear_color + RuTui::Ansi.clear