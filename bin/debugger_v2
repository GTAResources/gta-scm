#!/usr/bin/env ruby

# sudo bundle exec ./bin/debugger
if ENV["PWD"].split(/\//)[-1] == "gta-scm"
  $: << "./lib"
  require 'gta_scm'
end

print "\033]0;GtaScm Debugger\a"
print "\n"

require 'gta_scm/process'
require 'gta_scm/thread'
process = GtaScm::Process.new
process.load_symbols!("symbols.gta-scm-symbols")

process.detect_pid_and_attach!

require 'rutui'
require 'gta_scm/rutui_ext'
Thread.abort_on_exception = true
SIZE = RuTui::Screen.size
# current font size = 102 x 60
# smaller font size = 120 x 76
#   wider thread list - thread ids, favourite threads, group named threads together with count

# puts SIZE
# exit

# RuTui::Theme.create :scm, {
#   :background_bg => 234,
#   :background_fg => 236,
#   :border_fg => 103,
#   :background => RuTui::Pixel.new(236,234,":"),
#   :border     => RuTui::Pixel.new(103,234,"-"),
#   :textcolor  => 250,
#   :unfocused  => 245,
#   # :highlight  => 234,
#   # :highlight_fg  => 134,
#   :highlight  => 244,
#   :highlight_fg  => 234,
#   :rainbow    => [1,3,11,2,4,5],

#   :header_bg => 7,
#   # :header_bg => 3,
#   :header_fg => 0,
#   # :header_fg => 5,

#   :repl_fg => 7,
#   :repl_error => 198,
#   :repl_output => 5,
#   :repl_input => 6,
# }

theme = {}
theme[:bgfg] = 235
theme[:bgbg] = 233
theme[:bg] = ":"

theme[:text_fg] = 247
theme[:text_bg] = theme[:bgbg]

theme[:header_fg] = theme[:text_bg]
theme[:header_bg] = 130
theme[:focus_header_fg] = theme[:text_bg]
theme[:focus_header_bg] = 200

theme[:highlight_fg] = theme[:text_bg]
theme[:highlight_bg] = theme[:text_fg]

theme[:table_fg] = 130
theme[:table_bg] = theme[:text_bg]
theme[:focus_table_fg] = 75
theme[:focus_table_bg] = theme[:text_bg]

theme[:table_corner] = "+"
theme[:table_horizontal] = "-"
theme[:table_vertical] = "|"

theme[:table_row_odd_fg] = theme[:text_fg]
theme[:table_row_odd_bg] = theme[:text_bg]
theme[:table_row_even_fg] = theme[:text_fg]
theme[:table_row_even_bg] = theme[:text_bg]

theme[:scroll_bar_on_fg] = 130
theme[:scroll_bar_on_bg] = theme[:text_fg]
theme[:scroll_bar_on] = " "

theme[:scroll_bar_off_fg] = 130
theme[:scroll_bar_off_bg] = theme[:text_bg]
theme[:scroll_bar_off] = "|"

theme[:background] = RuTui::Pixel.new(theme[:bgfg],theme[:bgbg],theme[:bg])
theme[:border] = RuTui::Pixel.new(theme[:table_fg],theme[:table_bg],"-")
theme[:border_fg] = theme[:bgfg]
theme[:background_bg] = theme[:bgbg]
theme[:background_fg] = theme[:bgfg]
theme[:textcolor] = theme[:text_fg]
theme[:highlight] = theme[:highlight_bg]
theme[:highlight_fg] = theme[:highlight_fg]
# theme[:header_bg] = 7
# theme[:header_fg] = 0
theme[:repl_fg] = 7
theme[:repl_error] = 198
theme[:repl_output] = 5
theme[:repl_input] = 6
theme[:rainbow] = [1,3,11,2,4,5]

RuTui::Theme.create :scm, theme
RuTui::Theme.use :scm


require 'gta_scm/panel'
require 'gta_scm/panel_manager'

$panel_manager = GtaScm::PanelManager.new
# $panels = {}

$exit = false
# $desired_frame_time = 0.25
$desired_frame_time = 0.2

begin
ty = 0
console_lines = 16
console_at_top = false
bl = 82
if console_at_top
  ty = 23
  # $panel_manager.add_panel :repl, GtaScm::Panel::Repl.new($panel_manager,0,0,125,ty)
else
  # $panel_manager.add_panel :repl, GtaScm::Panel::Repl.new($panel_manager,0,61,125,console_lines+6)
end

$panel_manager.add_panel :process, GtaScm::Panel::Process2.new($panel_manager,66,ty+0,59,7)

$panel_manager.add_panel :thread_selector, GtaScm::Panel::ThreadSelector.new($panel_manager,0,ty+0,65,1)

$panel_manager.add_panel :thread_info, GtaScm::Panel::ThreadInfo2.new($panel_manager,13,ty+1,52,22)
$panel_manager.panels[:thread_info].controller = $panel_manager.panels[:thread_selector]

$panel_manager.add_panel :thread_list, GtaScm::Panel::ThreadList2.new($panel_manager,0,ty+1,14,bl)
$panel_manager.panels[:thread_list].controller = $panel_manager.panels[:thread_selector]

$panel_manager.add_panel :lvars, GtaScm::Panel::Lvars2.new($panel_manager,13,ty+6,52,37)
$panel_manager.panels[:lvars].controller = $panel_manager.panels[:thread_selector]

$panel_manager.add_panel :stack, GtaScm::Panel::Stack2.new($panel_manager,66,10,59,30)
$panel_manager.panels[:stack].controller = $panel_manager.panels[:thread_selector]

$panel_manager.add_panel :breakpoint, GtaScm::Panel::Breakpoint2.new($panel_manager,66,6,59,9)
$panel_manager.panels[:breakpoint].controller = $panel_manager.panels[:thread_selector]

# $panel_manager.add_panel :code_injector, GtaScm::Panel::CodeInjector.new($panel_manager,63,ty+11,62,12)
$panel_manager.add_panel :gvars, GtaScm::Panel::Gvars2.new($panel_manager,13,ty+43,52,40)
# $panel_manager.add_panel :mission_skipper, GtaScm::Panel::MissionSkipper.new($panel_manager,63,ty+15,28,32)

$panel_manager.add_panel :logger, GtaScm::Panel::Logger2.new($panel_manager,66,40,59,30)


screen = RuTui::Screen.new

$panel_manager.panels.each_pair do |_,panel|
  panel.add_elements_to_screen(screen)
end

RuTui::ScreenManager.add :default, screen
RuTui::ScreenManager.set_current :default

$panel_manager.panels.values.each(&:on_blur)
# $panel_manager.focused_panel = :repl
$panel_manager.focused_panel = :process
$panel_manager.on_init

def dump_persist_json
  File.open("debugger-persist.json","w") do |f|
    json = {}
    json[:version] = 1
    json[:focused_panel] = $panel_manager.focused_panel
    json[:panels] = {}
    $panel_manager.panels.each_pair do |name,panel|
      json[:panels][name] = {}
      json[:panels][name][:x] = panel.x
      json[:panels][name][:y] = panel.y
      json[:panels][name][:width] = panel.width
      json[:panels][name][:height] = panel.height
      json[:panels][name][:settings] = panel.settings
    end
    f << JSON.pretty_generate(json)
  end
end

thr = ::Thread.new do
  loop do
    break if $exit

    start = Time.now

    begin
      begin
        process.detect_pid_and_attach!
      rescue
        #whatevs
      end

      is_attached = false
      if process.attached?
        is_attached = true
        process.cached_threads = process.threads.dup
      else
        # not attached
      end

      $panel_manager.panels.each_pair do |name,panel|
        panel.update(process,is_attached,$panel_manager.focused_panel == name)
      end

      RuTui::ScreenManager.draw
      GC.start
    ensure
      sleep_time = (start + $desired_frame_time) - Time.now
      sleep(sleep_time) if sleep_time > 0.0
    end

  end
end

thr2 = ::Thread.new do
    `stty -echo`
  print "\e[?1000h" # get mouse coords as keypress
  print "\e[?25l" # hide cursor
  loop do
    break if $exit

    # print "\e[?25l" # hide cursor
    key = RuTui::Input.getc

    if key == :ctrl_q
      $exit = true
      break
    end

    key = key.force_encoding("ASCII-8BIT") if key.is_a?(String)

    $key = key

    if key.is_a?(String) && key.size > 1 && key.bytes[0] == 27
      x = key.bytes[4] - 32 - 1
      y = key.bytes[5] - 32 - 1
      # mouse event
      $panel_manager.panels.each_pair do |panel_name,panel|
        panel.abs_mouse_click(key.bytes[0],key.bytes[3],true,process)
        panel.abs_mouse_move(x,y,true,process)

        if x >= panel.x && x < panel.x + panel.width
          if y >= panel.y && y < panel.y + panel.height

            if key.bytes[3] == 32 # 32 = mouse down, 35 = mouse up

              if $panel_manager.focused_panel != panel_name
                $panel_manager.panels[$panel_manager.focused_panel].on_blur()
                $panel_manager.focused_panel = panel_name
                $panel_manager.panels[$panel_manager.focused_panel].on_focus()
              end

              panel.mouse_click(x-panel.x,y-panel.y,true,process)
            elsif key.bytes[3] == 67 # 67 = mouse move
              panel.mouse_move(x-panel.x,y-panel.y,true,process)
            elsif key.bytes[3] == 96 # scroll up
              panel.mouse_scroll(x-panel.x,y-panel.y,+1,true,process)
            elsif key.bytes[3] == 97 # scroll down
              panel.mouse_scroll(x-panel.x,y-panel.y,-1,true,process)
            end

          end
        end

      end
    elsif $panel_manager.panels[$panel_manager.focused_panel].has_textfield && !key.to_s.match(/ctrl_/)
      $panel_manager.panels[$panel_manager.focused_panel].textfield_input(key,true,process)
    # elsif key == :ctrl_p
    #   dump_persist_json
    elsif key == :ctrl_c || key == :ctrl_q
      $exit = true
    else
      $panel_manager.panels[$panel_manager.focused_panel].focused_input(key,true,process)
      $panel_manager.panels.each_pair do |_,panel|
        panel.input(key,true,process)
      end
    end

  end
end

# thr3 = ::Thread.new do
#   loop do


#     sleep 0.1
#   end
# end


thr.join
thr2.join
# thr3.join

rescue => ex

  50.times { puts }
  puts ex.message
  puts ex.backtrace
  50.times { puts }

  raise ex
ensure
print "\e[?1000l" # get mouse coords as keypress
# print "\e[?1003l" # get mouse coords as keypress
print RuTui::Ansi.clear_color + RuTui::Ansi.clear
`reset`
end