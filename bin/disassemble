#!/usr/bin/env ruby

# RUBY_GC_HEAP_INIT_SLOTS=45000
# ./bin/disassemble gta3 games/gta3/data/main.scm _out/gta3 Sexp
# ./bin/disassemble vice-city games/vice-city/data/main.scm _out/vice-city Sexp
# ./bin/disassemble san-andreas games/san-andreas/data/main.scm _out/san-andreas Sexp

# NEXT:
# ID integers from .ide files

USE_CACHE = true

if ENV["PWD"].split(/\//)[-1] == "gta-scm"
  $: << "./lib"
  require 'gta_scm'
end

logger.info "ARGV: #{ARGV.inspect}"

mem_use_bytes = (`ps -o rss= -p #{$$}`.to_i * 1024)
logger.info "Memory usage: #{mem_use_bytes/1024/1024} MB"

scm = GtaScm::Scm.load(ARGV[0],ARGV[1])

scm.img_file = GtaScm::ImgFile.open(File.dirname(ARGV[1])+"/script.img","r")

scm.load_opcode_definitions!

parser = nil
scm_hash = Digest::SHA256.file(scm.scm_file.path).hexdigest

if USE_CACHE
  path = "parser-#{scm.game_id}-#{scm_hash}.rbmarshall"
  if File.exist?(path)
    parser = Marshal.load( File.read(path) )
    parser.marshal_post_init(scm)
  end
end

if !parser
  parser = GtaScm::Parser.new(scm,0)
  # parser = GtaScm::MultithreadParser.new(scm,0)

  parser.load_opcode_definitions( scm.opcodes )

  # no real-world performance hit if we only update every 1000 nodes
  progress = ProgressBar.new(parser.size)
  parser.progress_callback = lambda do |offset,size,calls|
    if calls % 200 == 0
      progress.set!(offset)
    end
  end

  begin
    logger.info "Beginning parser"
    parser.parse!
    progress.set!(parser.size)
    logger.info "Parser complete"
  rescue => ex
    logger.error "We fucked up at #{parser.nodes.last.andand.offset}: #{ex.message}"
    ex.backtrace.each {|line| logger.debug line }
    logger.error "Dumping currently-parsed SCM"
  end

  if USE_CACHE
    dump = Marshal.dump(parser)
    File.open("parser-#{scm.game_id}-#{scm_hash}.rbmarshall","w"){|f| f << dump}
  end
end

img_parsers = []
if scm.img_file
  scm.img_file.parse!
  scm.img_file.entries.size.times do |i|
    puts "parsing entry #{i}"
    img_scm = GtaScm::Scm.load_string(ARGV[0],scm.img_file.data(i))
    img_parser = GtaScm::Parser.new(img_scm,0)
    img_parser.load_opcode_definitions( scm.opcodes )
    if i == 0
      # img_parser.parse_bare_instructions!(true)
    else
      img_parser.parse_bare_instructions!
    end
    img_parsers << img_parser
  end
  scm.load_from_parser(parser,img_parsers)
else
  scm.load_from_parser(parser)
end


format = ARGV[3].present? ? ARGV[3] : nil
if format
  logger.info "Outputting as #{format}"
  options = {
    label_names: "./games/san-andreas/label_names.txt",
    variable_names: "./games/san-andreas/variable_names.txt",
  }
  dis = GtaScm::Disassembler.const_get(format).new(scm,options)

  progress = ProgressBar.new(parser.size)
  dis.progress_callback = lambda do |offset,size,calls|
    if calls % 200 == 0
      progress.set!(offset)
    end
  end

  dis.disassemble(ARGV[2])
  progress.set!(parser.size)
  logger.info "Output to #{ARGV[2]}"
else
  logger.info "Skipping output (specify format as ARGV[3])"
end


mem_use_bytes = (`ps -o rss= -p #{$$}`.to_i * 1024)
logger.info "Memory usage: #{mem_use_bytes/1024/1024} MB"
logger.debug "GC stats: #{GC.stat.inspect}"
