#!/usr/bin/env ruby

# sudo bundle exec ./bin/debugger
if ENV["PWD"].split(/\//)[-1] == "gta-scm"
  $: << "./lib"
  require 'gta_scm'
end

print "\033]0;GtaScm Debugger\a"
print "\n"

require 'gta_scm/process'
require 'gta_scm/thread'
process = GtaScm::Process.new
process.load_symbols!("symbols.gta-scm-symbols")

process.detect_pid_and_attach!

scm = GtaScm::Scm.load_string("san-andreas","")
scm.load_opcode_definitions!
OPCODE_ARGS = {}
OPCODE_RET_ARGS = {}
OPCODE_NAMES = scm.opcode_names.keys.map do |name|
  opdef = scm.opcodes[name]
  args = []
  retargs = []
  opdef.arguments.each_with_index do |argdef,i|
    if argdef[:var]
      retargs << argdef[:type]
    else
      args << if argdef[:_type]
        if argdef[:_type].match(/ANY_INT/)
          ":int"
        elsif argdef[:_type].match(/ANY_FLOAT/)
          ":float"
        else
          argdef[:_type].to_s
        end
      else
        "#{i}"
      end
    end
  end
  OPCODE_ARGS[name] = args
  OPCODE_RET_ARGS[name] = retargs
  # "#{name.downcase}(#{args.join(",")})"
  name.downcase
end

require 'rutui'
require 'gta_scm/rutui_ext'
Thread.abort_on_exception = true
SIZE = RuTui::Screen.size
RuTui::Theme.create :scm, {
  :background => RuTui::Pixel.new(236,234,":"),
  :border     => RuTui::Pixel.new(103,234,"-"),
  :textcolor  => 250,
  # :highlight  => 234,
  # :highlight_fg  => 134,
  :highlight  => 244,
  :highlight_fg  => 234,
  :rainbow    => [1,3,11,2,4,5]
}
RuTui::Theme.use :scm

require "readline"
Readline.completion_append_character = " "
Readline.completion_proc = lambda do |str|
  OPCODE_NAMES.grep(/#{str}/)
end


BREAKPOINT_VARS = [:breakpoint_enabled,:breakpoint_resumed,:breakpoint_halt_vm,:breakpoint_do_exec]
BREAKPOINT_RETURN_VARS = [:breakpoint_repl_ret0,:breakpoint_repl_ret1,:breakpoint_repl_ret2,:breakpoint_repl_ret3]
def print_breakpoint_status(process)
  vars = {}
  BREAKPOINT_VARS.each do |var|
    vars[var] = process.read_scm_var(var,:int32)
  end

  # vars.each_pair do |k,v|
  #   puts "  #{k}: #{v}"
  # end
  breakpoint_script = process.threads.detect{|t| t.active? && !t.prev_opcode_is_wait?(process)}
  if breakpoint_script
    puts "Script ID #{breakpoint_script.thread_id} '#{breakpoint_script.name}' at breakpoint"
  end

  puts "c: resume, d: disable breakpoints"
end

def compile_input(input,process,scm)
  offset = 0
  parsed = Parser::CurrentRuby.parse(input)

  # hackily tell assembler to assign code/variables at alternate offsets
  asm = GtaScm::Assembler::Sexp.new(nil)
  asm.code_offset = offset
  def asm.install_features!
    class << self
      include GtaScm::Assembler::Feature::VariableAllocator
      include GtaScm::Assembler::Feature::VariableHeaderAllocator
    end
    self.on_feature_init()
  end

  compiler = GtaScm::RubyToScmCompiler.new
  compiler.scm = scm
  compiler.external = false

  return_vars_types = []
  compiler.emit_opcode_call_callback = lambda do |definition,name,args|
    return_vars = BREAKPOINT_RETURN_VARS.dup
    until definition.arguments.size == args.size
      return_var = return_vars.shift
      return_var_dma = process.scm_var_offset_for(return_var)
      arg = [:dmavar,return_var_dma,return_var]
      return_type = definition.arguments[args.size].andand[:type] || :int32
      return_vars_types << return_type
      args << arg
    end
  end
  instructions = compiler.transform_node(parsed)
  
  bytecode = ""

  bytecode << asm.assemble_instruction(scm,offset, instructions[0]).to_binary

  breakpoint_offset = process.scm_label_offset_for(:debug_breakpoint)
  bytecode << asm.assemble_instruction(scm,offset, [:goto,[[:int32,breakpoint_offset]]]).to_binary

  [bytecode,return_vars_types]
end

def get_return_values(return_vars_types = [],process)
  BREAKPOINT_RETURN_VARS[0...return_vars_types.size].map.each_with_index do |var,idx|
    process.read_scm_var(var,return_vars_types[idx])
  end
end

def write_and_execute_bytecode(bytecode,process)
  patchsite_offset = process.scm_label_offset_for(:debug_exec)
  process.write(process.scm_offset + patchsite_offset, bytecode)
  process.write_scm_var( :breakpoint_do_exec , 1 , :int32 )
  until process.read_scm_var( :breakpoint_do_exec , :int32) == 0
    sleep 0.1
  end
end

def extract_cast!(var_name)
  return nil if var_name.nil?
  if var_name.match(/\.to_i$/)
    var_name.gsub!(/\.to_i$/,'')
    return :int
  elsif var_name.match(/\.to_f$/)
    var_name.gsub!(/\.to_f$/,'')
    return :float
  end
  return nil
end

$active_thread_idx = 0
def set_active_thread(thread_name_or_index,process)
  if thread_name_or_index.nil?
    thread_name_or_index = "xhelper"
  end
  if thread_name_or_index.is_a?(Numeric)
    $active_thread_idx = thread_name_or_index.to_i
  else
    thread_idx = process.threads.find_index{|t| t.active? && t.name == thread_name_or_index}
    if thread_idx
      $active_thread_idx = thread_idx
    end
  end
  $prompt = if thread = process.threads[$active_thread_idx]
    thread.name.present? ? thread.name : "thread#{$active_thread_idx}"
  else
    "unknown"
  end
end

def active_thread(process)
  process.threads[$active_thread_idx]
end

$prompt = ""
def prompt
  "#{$prompt} > "
end
def iprompt
  # "#{" " * $prompt.chars.size}=> "
  "#{$prompt}=> "
end


puts "GTA-SCM console"

if !process.attached?
  puts "No game process found"
  exit 1
end

set_active_thread(nil,process)

puts "w: wait for breakpoint, d: attach to/spawn repl script"
input = RuTui::Input.getc

if input == "d"
  if script_idx = process.threads.find_index{|t| t.active? && t.name == "xrepl"}
    puts "attached to script ID #{script_idx}"
    set_active_thread(script_idx,process)
  else
    puts "no repl host script found, spawning"
    offset = process.scm_label_offset_for(:debug_repl)
    # offset = process.scm_label_offset_for(:thread_corona)
    # puts "doing RPC at offset #{offset}"
    process.rpc(1,offset)
    # process.rpc(1,1)
    script_idx = process.threads.find_index{|t| t.active? && t.name == "xrepl"}
    puts "attached to script ID #{script_idx}"
  end
else
  puts "Waiting for breakpoint..."
  while process.read_scm_var(:breakpoint_enabled,:int32) == 0
    sleep 0.1
  end
end
# print_breakpoint_status(process)

Readline::HISTORY << "explode_car "
Readline::HISTORY << "create_car 477 , 2227.0 , -1261.0 , 24.0"
Readline::HISTORY << "request_model 477"

loop do
  input = Readline.readline(prompt, true).strip

  begin
    case input
    when "exit"
      exit
    when "c"
      process.write_scm_var( :breakpoint_resumed , 1 , :int32 )
    when "d"
      process.write_scm_var( :breakpoint_enabled , 0 , :int32 )
    when /^\$(\w+)(\.\w+)?$/
      gvar = $1.dup rescue nil
      cast = $2.dup rescue nil
      type = extract_cast!(cast)
      offset = process.scm_var_offset_for(gvar)
      raise "No global var #{gvar}" if !offset
      return_value = process.read_scm_var(offset, type || process.symbols_var_types[offset] || :int)
      puts "#{iprompt}#{return_value.inspect}"
    when /^(\w+)(\.\w+)?$/
      lvar = $1.dup rescue nil
      cast = $2.dup rescue nil
      type = extract_cast!(cast)
      thread = active_thread(process)
      symbols = process.thread_symbols[thread.name]
      return_value = nil
      lvar_def = symbols.detect{|k,v| v[0] == lvar}
      raise "No local var #{lvar} for script #{thread.name}" if !lvar_def
      lvar_idx = lvar_def[0].to_i
      type ||= lvar_def[1][1] || :int
      lvars_cast = type == :float ? thread.local_variables_floats : thread.local_variables_ints
      return_value = lvars_cast[lvar_idx]
      puts "#{iprompt}#{return_value.inspect}"
    else
      bytecode,return_vars_types = compile_input(input,process,scm)
      write_and_execute_bytecode(bytecode,process)
      return_values = get_return_values(return_vars_types,process)
      puts "#{iprompt}#{return_values.inspect}"
    end
  rescue Ragweed::Wraposx::KernelCallError => ex
    puts "Congrats, you fucked up so badly you crashed the game"
    puts "No return value is possible"
  rescue => ex
    puts " ! #{ex.message}"
    # puts " ! #{ex.backtrace}"
    puts
  end

end

