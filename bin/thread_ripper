#!/usr/bin/env ruby

# sudo ./bin/thread_ripper

if ENV["PWD"].split(/\//)[-1] == "gta-scm"
  $: << "./lib"
  require 'gta_scm'
end

require 'gta_scm/process'
require 'gta_scm/thread'
process = GtaScm::Process.new
process.load_symbols!("symbols.gta-scm-symbols")

process.detect_pid_and_attach!

# process.threads.each_with_index do |thread,thread_id|
#   if thread.active? && thread.pc > 0
#     puts "#{thread_id}: #{thread.active? ? "o" : "-"} #{thread.name.ljust(8," ")} PC=#{thread.pc - process.scm_offset} ADDR=#{thread.offset}, PREV=#{thread.prev_thread_pointer} NEXT=#{thread.next_thread_pointer}"
#   end
# end

require 'rutui'
require 'timeout'




COLUMNS = [:thread_id,:name,:pc,:wake_time]

screen = RuTui::Screen.new
@table = RuTui::Table.new({
  :x => 0,
  :y  => 0,
  :highlight_direction => :horizontal, # default
  :table => [["","","",""]],
  :cols => [
    { title: "ID", length: 3 },
    { title: "Name", length: 8 },
    { title: "PC",   length: 8 },
    { title: "Wake time",   length: 8 },
  ],
  :header => true,
  # :hover => 32,
})
screen.add @table

RuTui::ScreenManager.add :default, screen
RuTui::ScreenManager.loop({ autodraw: true }) do |key|

  break if key == "q" or key == :ctrl_c # CTRL+C

  @table.set_table( process.threads.select{|t| t.active? }[0..10].map{|t| COLUMNS.map{|c| t.send(c) }} )
end

print RuTui::Ansi.clear_color + RuTui::Ansi.clear