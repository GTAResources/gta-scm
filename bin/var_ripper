#!/usr/bin/env ruby

# ./bin/thread_ripper

if ENV["PWD"].split(/\//)[-1] == "gta-scm"
  $: << "./lib"
  require 'gta_scm'
end

require 'gta_scm/thread'

require 'ragweed'
require 'ragweed/debuggerosx'

# SCM_ADDRESS = 8520328
# SCM_SIZE = 917
# SCM_ADDRESS = 0xA49960
# SCM_ADDRESS -= 8096
# SCM_ADDRESS = 0xA00000
SAN_ANDREAS_3_0_SCM_ADDRESS = 10664568
# =>                          10787168


# =>                          11056176
# =>                          10954856
DIFF_TO_1_0 = +122600



SCM_ADDRESS = SAN_ANDREAS_3_0_SCM_ADDRESS
SCM_SIZE = 64_000

SYMBOLS_PATH = "symbols.gta-scm-symbols"

pid = nil

if !pid
  # pid = `ps -A | grep -m1 'Vice City.app' | awk '{print $1}'`.to_i
  pid = `ps -A | grep -m1 'San Andreas.app' | awk '{print $1}'`.to_i
end

process = Ragweed::Debuggerosx.new(pid)

bytes = Ragweed::Wraposx::vm_read(process.task,SAN_ANDREAS_3_0_SCM_ADDRESS,SCM_SIZE)
# bytes = GtaScm::FileWalker.new( StringIO.new(bytes) )

puts "Found SCM at #{SCM_ADDRESS}, size #{SCM_SIZE}"

if File.exists?(SYMBOLS_PATH)
  puts "Detected symbols, dumping vars"
  data = JSON.parse( File.read(SYMBOLS_PATH) )

  largest_label = data["variables"].map{|k,v| v[0]}.compact.sort_by(&:size).last.size
  largest_label += 2

  data["variables"].each_pair do |offset,metadata|
    offset = offset.to_i
    label = metadata[0] || "?"

    # if data["variables"][offset-4].andand[1] == "string"
    #   # skip second half of string var
    #   next
    # end

    if metadata[1] == "float"
      type = :float32
      value = bytes[offset...offset+4]
      value = GtaScm::Types.bin2value(value,type)
    elsif metadata[1] == "string"
      type = :string8
      value = bytes[offset...offset+8]
      value = GtaScm::Types.bin2value(value,type)
    else
      type = :int32
      value = bytes[offset...offset+4]
      value = GtaScm::Types.bin2value(value,type)
    end

    puts "#{offset.to_s.rjust(5)} #{"#{label}:".ljust(largest_label)} #{type.to_s.ljust(12)} #{value}"
  end
end

# puts GtaScm::ByteArray.new(bytes.bytes).hex_inspect
# bytes = GtaScm::FileWalker.new( StringIO.new(bytes) )
# thread = GtaScm::Thread.new
# thread.eat!( bytes )
